%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
name:
  - Scatha IR
file_extensions:
  - scir
version:
  - 0
scope: source.example-c
variables:
  ident: '[A-Za-z_0-9]*'

contexts:
  main:
    # Comments begin with a '#' and finish at the end of the line
    - match: '#'
      scope: punctuation.definition.comment.example-c
      push: line_comment

    # C-style block comment
    # - match: '\/\*(\*(?!\/)|[^*])*\*\/'
    #   scope: punctuation.definition.comment.example-c
    #   push: line_comment

  # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: \b(alloca|store|load|zext|sext|trunc|fext|ftrunc|utof|stof|ftou|ftos|bitcast|bnt|lnt|neg|cmp|ls|leq|grt|geq|eq|neq|add|sub|mul|sdiv|udiv|srem|urem|fadd|fsub|fmul|fdiv|lshl|lshr|ashl|ashr|and|or|xor|goto|branch|return|call|phi|getelementptr|extract_value|insert_value|select)\b
      scope: keyword.control

    - match: \b(func|ext|label)\b
      scope: punctuation.definition.keyword
    
    - match: \b(void|f32|f64)\b  
      scope: punctuation.definition.keyword

    - match: \b(i[1-9][0-9]*)\b
      scope: punctuation.definition.keyword    

    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: double_quoted_string
    
    - match: '\b[A-Za-z]+\b'
      scope: variable.other

    - match: '\b@{{ident}}\b'
      scope: entity.name.function


    # Numbers
    - match: '\b(-)?[0-9A-Fa-f]+\b'
      scope: constant.numeric.example-c
    - match: '\b(-)?[0-9]+\.[0-9]+\b' 
      scope: constant.numeric.example-c

  double_quoted_string:
    - meta_scope: string.quoted.double.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  line_comment:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true
