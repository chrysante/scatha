%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
name:
  - Scatha
file_extensions:
  - sc
version:
  - 0
scope: source.example-c
variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*'

contexts:
  main:
    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.example-c
      push: line_comment

    # C-style block comment
    - match: '\/\*'
      scope: punctuation.definition.comment.example-c
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.example-c
        - match: ($|\n)?\*\/
          pop: true

  # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: \b(if|else|for|while|do|return|break|continue)\b
      scope: keyword.control

    # Builtins
    - match: \b(__builtin_abs_f64|__builtin_exp_f64|__builtin_exp2_f64|__builtin_exp10_f64|__builtin_log_f64|__builtin_log2_f64|__builtin_log10_f64|__builtin_pow_f64|__builtin_sqrt_f64|__builtin_cbrt_f64|__builtin_hypot_f64|__builtin_sin_f64|__builtin_cos_f64|__builtin_tan_f64|__builtin_asin_f64|__builtin_acos_f64|__builtin_atan_f64|__builtin_fract_f64|__builtin_floor_f64|__builtin_ceil_f64|__builtin_abs_f32|__builtin_exp_f32|__builtin_exp2_f32|__builtin_exp10_f32|__builtin_log_f32|__builtin_log2_f32|__builtin_log10_f32|__builtin_pow_f32|__builtin_sqrt_f32|__builtin_cbrt_f32|__builtin_hypot_f32|__builtin_sin_f32|__builtin_cos_f32|__builtin_tan_f32|__builtin_asin_f32|__builtin_acos_f32|__builtin_atan_f32|__builtin_fract_f32|__builtin_floor_f32|__builtin_ceil_f32|__builtin_memcpy|__builtin_memmove|__builtin_memset|__builtin_alloc|__builtin_dealloc|__builtin_putchar|__builtin_puti64|__builtin_putf64|__builtin_putstr|__builtin_putptr|__builtin_readline|__builtin_strtos64|__builtin_strtof64|__builtin_trap|__builtin_rand_i64)\b

      scope: punctuation.definition.keyword

    - match: \b(fn|var|let|struct|protocol|public|internal|private|mut|new|delete|move|unique|import|use|extern|reinterpret|as)\b
      scope: punctuation.definition.keyword

    - match: \b(void|bool|byte|int|float|double|str|true|false|this|null)\b
      scope: punctuation.definition.keyword

    - match: \b(s8|s16|s32|s64|u8|u16|u32|u64)\b
      scope: punctuation.definition.keyword

    - match: '(=|\+=|-=|\*=|\/=|%=|>>=|<<=|&=|\|=|\^=)'
      scope: keyword.operator.assignment
    - match: '(\+|-|\*|\/|%)'
      scope: keyword.operator.arithmetic
    - match: '(<<|>>|&|\||\^)'
      scope: keyword.operator.bitwise
    - match: '(&&|\|\|)'
      scope: keyword.operator.logical
    - match: '(==|!=|<|<=|>|>=|\?|:)'
      scope: keyword.operator

    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: double_quoted_string
    
    - match: '\b{{ident}}\b'
      scope: variable.other

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.example-c

  double_quoted_string:
    - meta_scope: string.quoted.double.example-c
    - match: '\\.'
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  line_comment:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true
