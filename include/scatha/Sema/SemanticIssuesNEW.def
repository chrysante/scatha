// No include guards

// ===--------------------------------------------------------------------=== //
// === List of all reasons for a generic bad statement -------------------=== //
// ===--------------------------------------------------------------------=== //

#ifndef SC_SEMA_GENERICBADSTMT_DEF
#   define SC_SEMA_GENERICBADSTMT_DEF(reason, severity, text)
#endif

SC_SEMA_GENERICBADSTMT_DEF(ReservedIdentifier,
                           Error,
                           "Reserved identifier")
SC_SEMA_GENERICBADSTMT_DEF(InvalidScope,
                           Error,
                           ::format(statement()) << " is invalid in "
                               << ::format(scope()))

#undef SC_SEMA_GENERICBADSTMT_DEF

// ===--------------------------------------------------------------------=== //
// === List of all reasons for a bad variable declaration ----------------=== //
// ===--------------------------------------------------------------------=== //

#ifndef SC_SEMA_BADVARDECL_DEF
#   define SC_SEMA_BADVARDECL_DEF(reason, severity, text)
#endif

SC_SEMA_BADVARDECL_DEF(IncompleteType,
                       Error,
                       "Cannot declare variable of incomplete type " << type()->name())
SC_SEMA_BADVARDECL_DEF(ExpectedRefInit,
                       Error,
                       "An lvalue expression is required to initialize variable reference")
SC_SEMA_BADVARDECL_DEF(CantInferType,
                       Error,
                       "Can't infer type")
SC_SEMA_BADVARDECL_DEF(RefInStruct,
                       Error,
                       "Cannot declare variable references in structs")
SC_SEMA_BADVARDECL_DEF(ThisInFreeFunction,
                       Error,
                       "this-parameter can only be declared in member functions")
SC_SEMA_BADVARDECL_DEF(ThisPosition,
                       Error,
                       "this-parameter can only be declared as the first parameter")

#undef SC_SEMA_BADVARDECL_DEF

// ===--------------------------------------------------------------------=== //
// === List of all reasons for a bad special member function -------------=== //
// ===--------------------------------------------------------------------=== //

#ifndef SC_SEMA_BADSMF_DEF
#   define SC_SEMA_BADSMF_DEF(reason, severity, text)
#endif

SC_SEMA_BADSMF_DEF(HasReturnType,
                   Error,
                   "Function '" << SMF() << "' must not have a return type")
SC_SEMA_BADSMF_DEF(NotInStruct,
                   Error,
                   "Function '" << SMF() << "' must be a member function")
SC_SEMA_BADSMF_DEF(NoParams,
                   Error,
                   "Function '" << SMF()
                       << "' must have at least one parameter of type "
                       << "&mut " << parent()->name())
SC_SEMA_BADSMF_DEF(BadFirstParam,
                   Error,
                   "The first parameter to function '" << SMF()
                       << "' must be of type "
                       << "&mut " << parent()->name())
SC_SEMA_BADSMF_DEF(MoveSignature,
                   Error,
                   "The parameters types of function '" << SMF()
                       << "' must be "
                       << "&mut " << parent()->name() << ", "
                       << "&mut " << parent()->name())
SC_SEMA_BADSMF_DEF(DeleteSignature,
                   Error,
                   "Function '" << SMF() << "' must have exactly one parameter")

#undef SC_SEMA_BADSMF_DEF

// ===--------------------------------------------------------------------=== //
// === List of all reasons for a bad return statement --------------------=== //
// ===--------------------------------------------------------------------=== //

#ifndef SC_SEMA_BADRETURN_DEF
#   define SC_SEMA_BADRETURN_DEF(reason, severity, text)
#endif

SC_SEMA_BADRETURN_DEF(NonVoidMustReturnValue,
                      Error,
                      "Non-void function must return a value")
SC_SEMA_BADRETURN_DEF(VoidMustNotReturnValue,
                      Error,
                      "Void function must not return a value")

#undef SC_SEMA_BADRETURN_DEF

// ===--------------------------------------------------------------------=== //
// === List of all reasons for a bad expression --------------------------=== //
// ===--------------------------------------------------------------------=== //

#ifndef SC_SEMA_BADEXPR_DEF
#   define SC_SEMA_BADEXPR_DEF(ExprType, Reason, Severity, Message)
#endif

/// This should only be used for temporary language constructs for which it is
/// not worthwhile to make special errors
SC_SEMA_BADEXPR_DEF(Expression,
                    GenericBadExpr,
                    Error,
                    "Bad expression")

SC_SEMA_BADEXPR_DEF(Identifier,
                    UndeclaredID,
                    Error,
                    "Use of undeclared identifier '" << expr->value() << "'")

SC_SEMA_BADEXPR_DEF(UnaryExpression,
                    UnaryExprBadType,
                    Error,
                    "Operand type " << expr->operand()->type()->name()
                        << " is invalid for unary operator " << expr->operation())

SC_SEMA_BADEXPR_DEF(UnaryExpression,
                    UnaryExprValueCat,
                    Error,
                    expr->operand()->valueCategory()
                            << " operand is invalid for unary operator "
                            << expr->operation())

SC_SEMA_BADEXPR_DEF(UnaryExpression,
                    UnaryExprImmutable,
                    Error,
                    "Immutable operand is invalid for unary operator "
                       << expr->operation())

SC_SEMA_BADEXPR_DEF(BinaryExpression,
                    BinaryExprNoCommonType,
                    Error,
                    "Operand types " << expr->lhs()->type()->name()
                        << " and " << expr->rhs()->type()->name()
                        << " have no common type")

SC_SEMA_BADEXPR_DEF(BinaryExpression,
                    BinaryExprBadType,
                    Error,
                    ::format(expr->operation()) << " is not supported for operand types "
                        << expr->lhs()->type()->name() << " and "
                        << expr->rhs()->type()->name())

SC_SEMA_BADEXPR_DEF(BinaryExpression,
                    BinaryExprValueCatLHS,
                    Error,
                    expr->lhs()->valueCategory()
                        << " operand is invalid in assignment expression")

SC_SEMA_BADEXPR_DEF(BinaryExpression,
                    BinaryExprImmutableLHS,
                    Error,
                    "Immutable operand is invalid in assignment expression")

SC_SEMA_BADEXPR_DEF(MemberAccess,
                    MemAccNonStaticThroughType,
                    Error,
                    "Cannot access non-static member "
                        << expr->member()->value()
                        << " without an object")

SC_SEMA_BADEXPR_DEF(MemberAccess,
                    MemAccTypeThroughValue,
                    Error,
                    "Cannot access non-static member "
                        << expr->member()->value()
                        << " without an object")

SC_SEMA_BADEXPR_DEF(Conditional,
                    ConditionalNoCommonType,
                    Error,
                    "Operand types " << expr->thenExpr()->type()->name()
                        << " and " << expr->elseExpr()->type()->name()
                        << " have no common type")

SC_SEMA_BADEXPR_DEF(CallLike,
                    SubscriptNoArray,
                    Error,
                    "Subscript expression on non-array type "
                        << expr->callee()->type()->name())

SC_SEMA_BADEXPR_DEF(Subscript,
                    SubscriptArgCount,
                    Error,
                    "Subscript expression requires exactly one argument")

SC_SEMA_BADEXPR_DEF(FunctionCall,
                    ExplicitSMFCall,
                    Error,
                    "Cannot explicitly call special member function '"
                        << cast<OverloadSet const*>(expr->callee()->entity())->SMFKind()
                        << "'")

SC_SEMA_BADEXPR_DEF(FunctionCall,
                    ObjectNotCallable,
                    Error,
                    "Object not callable")

SC_SEMA_BADEXPR_DEF(FunctionCall,
                    CantDeduceReturnType,
                    Error,
                    "Cannot deduce return type on recursive function")

SC_SEMA_BADEXPR_DEF(ListExpression,
                    ListExprNoCommonType,
                    Error,
                    "No common type in array expression")

SC_SEMA_BADEXPR_DEF(ListExpression,
                    ListExprVoid,
                    Error,
                    "Invalid array of void elements")

SC_SEMA_BADEXPR_DEF(ListExpression,
                    ListExprTypeExcessElements,
                    Error,
                    "Too many arguments in array type expression")

SC_SEMA_BADEXPR_DEF(ListExpression,
                    ListExprNoIntSize,
                    Error,
                    "Array type expression requires integral size")

SC_SEMA_BADEXPR_DEF(ListExpression,
                    ListExprNoConstSize,
                    Error,
                    "Array type expression requires constant size")

SC_SEMA_BADEXPR_DEF(ListExpression,
                    ListExprNegativeSize,
                    Error,
                    "Array type expression requires non-negative size")

SC_SEMA_BADEXPR_DEF(ListExpression,
                    ListExprBadEntity,
                    Error,
                    "Invalid entity for array expression")

#undef SC_SEMA_BADEXPR_DEF
