// No include guards

// ===--------------------------------------------------------------------=== //
// === List of all reasons for a generic bad statement -------------------=== //
// ===--------------------------------------------------------------------=== //

#ifndef SC_SEMA_GENERICBADSTMT_DEF
#   define SC_SEMA_GENERICBADSTMT_DEF(reason, severity, text)
#endif

SC_SEMA_GENERICBADSTMT_DEF(ReservedIdentifier,
                           Error,
                           "Reserved identifier")
SC_SEMA_GENERICBADSTMT_DEF(InvalidScope,
                           Error,
                           ::format(statement()) << " is invalid in "
                               << ::format(scope()))

#undef SC_SEMA_GENERICBADSTMT_DEF

// ===--------------------------------------------------------------------=== //
// === List of all reasons for a bad variable declaration ----------------=== //
// ===--------------------------------------------------------------------=== //

#ifndef SC_SEMA_BADVARDECL_DEF
#   define SC_SEMA_BADVARDECL_DEF(reason, severity, text)
#endif

SC_SEMA_BADVARDECL_DEF(IncompleteType,
                       Error,
                       "Cannot declare variable of incomplete type " << type()->name())
SC_SEMA_BADVARDECL_DEF(ExpectedRefInit,
                       Error,
                       "An lvalue expression is required to initialize variable reference")
SC_SEMA_BADVARDECL_DEF(CantInferType,
                       Error,
                       "Can't infer type")
SC_SEMA_BADVARDECL_DEF(RefInStruct,
                       Error,
                       "Cannot declare variable references in structs")
SC_SEMA_BADVARDECL_DEF(ThisInFreeFunction,
                       Error,
                       "this-parameter can only be declared in member functions")
SC_SEMA_BADVARDECL_DEF(ThisPosition,
                       Error,
                       "this-parameter can only be declared as the first parameter")

#undef SC_SEMA_BADVARDECL_DEF

// ===--------------------------------------------------------------------=== //
// === List of all reasons for a bad special member function -------------=== //
// ===--------------------------------------------------------------------=== //

#ifndef SC_SEMA_BADSMF_DEF
#   define SC_SEMA_BADSMF_DEF(reason, severity, text)
#endif

SC_SEMA_BADSMF_DEF(HasReturnType,
                   Error,
                   "Function '" << SMF() << "' must not have a return type")
SC_SEMA_BADSMF_DEF(NotInStruct,
                   Error,
                   "Function '" << SMF() << "' must be a member function")
SC_SEMA_BADSMF_DEF(NoParams,
                   Error,
                   "Function '" << SMF()
                       << "' must have at least one parameter of type "
                       << "&mut " << parent()->name())
SC_SEMA_BADSMF_DEF(BadFirstParam,
                   Error,
                   "The first parameter to function '" << SMF()
                       << "' must be of type "
                       << "&mut " << parent()->name())
SC_SEMA_BADSMF_DEF(MoveSignature,
                   Error,
                   "The parameters types of function '" << SMF()
                       << "' must be "
                       << "&mut " << parent()->name() << ", "
                       << "&mut " << parent()->name())
SC_SEMA_BADSMF_DEF(DeleteSignature,
                   Error,
                   "Function '" << SMF() << "' must have exactly one parameter")

#undef SC_SEMA_BADSMF_DEF

// ===--------------------------------------------------------------------=== //
// === List of all reasons for a bad return statement --------------------=== //
// ===--------------------------------------------------------------------=== //

#ifndef SC_SEMA_BADRETURN_DEF
#   define SC_SEMA_BADRETURN_DEF(reason, severity, text)
#endif

SC_SEMA_BADRETURN_DEF(NonVoidMustReturnValue,
                      Error,
                      "Non-void function must return a value")
SC_SEMA_BADRETURN_DEF(VoidMustNotReturnValue,
                      Error,
                      "Void function must not return a value")

#undef SC_SEMA_BADRETURN_DEF

// ===--------------------------------------------------------------------=== //
// === List of all reasons for a bad identifier --------------------------=== //
// ===--------------------------------------------------------------------=== //

#ifndef SC_SEMA_BADID_DEF
#   define SC_SEMA_BADID_DEF(reason, severity, text)
#endif

SC_SEMA_BADID_DEF(Undeclared,
                  Error,
                  "Use of undeclared identifier '" << identifier()->value() << "'")

#undef SC_SEMA_BADID_DEF

// ===--------------------------------------------------------------------=== //
// === List of all reasons for a bad unary expression --------------------=== //
// ===--------------------------------------------------------------------=== //

#ifndef SC_SEMA_BADUNEXPR_DEF
#   define SC_SEMA_BADUNEXPR_DEF(reason, severity, text)
#endif

// TODO: Rename to BadType
SC_SEMA_BADUNEXPR_DEF(Type,
                      Error,
                      "Operand type " << expression()->operand()->type()->name()
                          << " is invalid for unary operator " << expression()->operation())

SC_SEMA_BADUNEXPR_DEF(ValueCat,
                      Error,
                      expression()->operand()->valueCategory()
                          << " operand is invalid for unary operator "
                          << expression()->operation())

SC_SEMA_BADUNEXPR_DEF(Immutable,
                      Error,
                      "Immutable operand is invalid for unary operator "
                          << expression()->operation())

#undef SC_SEMA_BADUNEXPR_DEF

// ===--------------------------------------------------------------------=== //
// === List of all reasons for a bad binary expression -------------------=== //
// ===--------------------------------------------------------------------=== //

#ifndef SC_SEMA_BADBINEXPR_DEF
#   define SC_SEMA_BADBINEXPR_DEF(reason, severity, text)
#endif

SC_SEMA_BADBINEXPR_DEF(NoCommonType,
                       Error,
                       "Operand types " << expression()->lhs()->type()->name()
                           << " and " << expression()->rhs()->type()->name()
                           << " have no common type")

SC_SEMA_BADBINEXPR_DEF(BadType,
                       Error,
                       ::format(expression()->operation()) << " is not supported for operand types "
                           << expression()->lhs()->type()->name() << " and "
                           << expression()->rhs()->type()->name())

SC_SEMA_BADBINEXPR_DEF(ValueCatLHS,
                       Error,
                       expression()->lhs()->valueCategory()
                          << " operand is invalid in assignment expression")

SC_SEMA_BADBINEXPR_DEF(ImmutableLHS,
                       Error,
                       "Immutable operand is invalid in assignment expression")

#undef SC_SEMA_BADBINEXPR_DEF
