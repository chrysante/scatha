// No include guards

// ===----------------------------------------------------------------------===
// === List of all VM instructions -----------------------------------------===
// ===----------------------------------------------------------------------===

#ifndef SC_INSTRUCTION_DEF
#   define SC_INSTRUCTION_DEF(inst, class)
#endif

/// ** Function call and return **
/// Performs the following operations:
/// \code
/// regPtr    += regOffset
/// regPtr[-2] = regOffset
/// regPtr[-1] = iptr
/// jmp          offset
/// \endcode
SC_INSTRUCTION_DEF(call, Other) // (i32 offset, u8 regOffset)

/// Return to caller. Effectively performs the following operations:
/// \code
/// iptr = regPtr[-1]
/// regPtr -= regPtr[-2]
/// \endcode
SC_INSTRUCTION_DEF(ret, Other)

/// Immediately terminates the program.
SC_INSTRUCTION_DEF(terminate, Other)

/// ** Loads and stores **
/// Copies the value from the source operand (right) into the destination
/// operand (right).
SC_INSTRUCTION_DEF(mov64RR, RR) // (u8 destRegIdx,  u8 sourceRegIdx)
SC_INSTRUCTION_DEF(mov64RV, RV) // (u8 destRegIdx,  u64 sourceValue)
SC_INSTRUCTION_DEF(mov8MR,  MR) // (MEMORY_POINTER, u8 sourceRegIdx)
SC_INSTRUCTION_DEF(mov16MR, MR) // (MEMORY_POINTER, u8 sourceRegIdx)
SC_INSTRUCTION_DEF(mov32MR, MR) // (MEMORY_POINTER, u8 sourceRegIdx)
SC_INSTRUCTION_DEF(mov64MR, MR) // (MEMORY_POINTER, u8 sourceRegIdx)
SC_INSTRUCTION_DEF(mov8RM,  RM) // (u8 destRegIdx,  MEMORY_POINTER)
SC_INSTRUCTION_DEF(mov16RM, RM) // (u8 destRegIdx,  MEMORY_POINTER)
SC_INSTRUCTION_DEF(mov32RM, RM) // (u8 destRegIdx,  MEMORY_POINTER)
SC_INSTRUCTION_DEF(mov64RM, RM) // (u8 destRegIdx,  MEMORY_POINTER)

/// Store the address of the register at \p sourceRegIdx into the register at \p targetRegIdx
SC_INSTRUCTION_DEF(alloca_, Other) // (u8 targetRegIdx, u8 sourceRegIdx)

/// ** Jumps **
/// Jumps are performed by adding the \p offset argument to the instruction
/// pointer.
/// This means a jump with \p offset 0 will jump to itself and thus enter an
/// infinite loop.

/// Jump to the specified offset.
SC_INSTRUCTION_DEF(jmp, Jump) // (i32 offset)
/// Jump to the specified offset if equal flag is set.
SC_INSTRUCTION_DEF(je,  Jump) // (i32 offset)
/// Jump to the specified offset if equal flag is not set.
SC_INSTRUCTION_DEF(jne, Jump) // (i32 offset)
/// Jump to the specified offset if less flag is set.
SC_INSTRUCTION_DEF(jl,  Jump) // (i32 offset)
/// Jump to the specified offset if less flag or equal flag is set.
SC_INSTRUCTION_DEF(jle, Jump) // (i32 offset)
/// Jump to the specified offset if less flag and equal flag are not set.
SC_INSTRUCTION_DEF(jg,  Jump) // (i32 offset)
/// Jump to the specified offset if less flag is not set.
SC_INSTRUCTION_DEF(jge, Jump) // (i32 offset)

/// ** Comparison **
/// Compare the operands and set flags accordingly
SC_INSTRUCTION_DEF(ucmpRR, RR) //  (u8 regIdxA, u8 regIdxB)
SC_INSTRUCTION_DEF(icmpRR, RR) //  (u8 regIdxA, u8 regIdxB)
SC_INSTRUCTION_DEF(ucmpRV, RV) //  (u8 regIdxA, u64 value)
SC_INSTRUCTION_DEF(icmpRV, RV) //  (u8 regIdxA, u64 value)
SC_INSTRUCTION_DEF(fcmpRR, RR) //  (u8 regIdxA, u8 regIdxB)
SC_INSTRUCTION_DEF(fcmpRV, RV) //  (u8 regIdxA, u64 value)

/// Compare the operand to 0 and set flags accordingly
SC_INSTRUCTION_DEF(itest, R) //  (u8 regIdx)
SC_INSTRUCTION_DEF(utest, R) //  (u8 regIdx)

/// ** Read comparison results **
/// Set register to 0 or 1 based of the flags set by the \p *cmp* or \p *test
/// instructions
SC_INSTRUCTION_DEF(sete,  R) //  (u8 regIdx)
SC_INSTRUCTION_DEF(setne, R) //  (u8 regIdx)
SC_INSTRUCTION_DEF(setl,  R) //  (u8 regIdx)
SC_INSTRUCTION_DEF(setle, R) //  (u8 regIdx)
SC_INSTRUCTION_DEF(setg,  R) //  (u8 regIdx)
SC_INSTRUCTION_DEF(setge, R) //  (u8 regIdx)

/// ** Unary operations **
// reg[regIdx] = !reg[regIdx]
SC_INSTRUCTION_DEF(lnt, R) // (u8 regIdx)
// reg[regIdx] = ~reg[regIdx]
SC_INSTRUCTION_DEF(bnt, R) // (u8 regIdx)

/// ** Integer arithmetic **
// reg[regIdxA] += reg[regIdxA]
SC_INSTRUCTION_DEF(addRR, RR) // (u8 regIdxA, u8 regIdxA)
// reg[regIdx] += value
SC_INSTRUCTION_DEF(addRV, RV) // (u8 regIdx, u64 value)
// reg[regIdxA] += memory[eval(MEMORY_POINTER)]
SC_INSTRUCTION_DEF(addRM, RM) // (u8 regIdxA, MEMORY_POINTER)
// reg[regIdxA] -= reg[regIdxA]
SC_INSTRUCTION_DEF(subRR, RR) // (u8 regIdxA, u8 regIdxA)
// reg[regIdx] -= value
SC_INSTRUCTION_DEF(subRV, RV) // (u8 regIdx, u64 value)
// reg[regIdxA] -= memory[eval(MEMORY_POINTER)]
SC_INSTRUCTION_DEF(subRM, RM) // (u8 regIdxA, MEMORY_POINTER)
// reg[regIdxA] *= reg[regIdxA]
SC_INSTRUCTION_DEF(mulRR, RR) // (u8 regIdxA, u8 regIdxA)
// reg[regIdx] *= value
SC_INSTRUCTION_DEF(mulRV, RV) // (u8 regIdx, u64 value)
// reg[regIdxA] *= memory[eval(MEMORY_POINTER)]
SC_INSTRUCTION_DEF(mulRM, RM) // (u8 regIdxA, MEMORY_POINTER)
// reg[regIdxA] /= reg[regIdxA]
SC_INSTRUCTION_DEF(divRR, RR) // (u8 regIdxA, u8 regIdxA)
// reg[regIdx] /= value
SC_INSTRUCTION_DEF(divRV, RV) // (u8 regIdx, u64 value)
// reg[regIdxA] /= memory[eval(MEMORY_POINTER)]
SC_INSTRUCTION_DEF(divRM, RM) // (u8 regIdxA, MEMORY_POINTER)
// reg[regIdxA] /= reg[regIdxA]
SC_INSTRUCTION_DEF(idivRR, RR) // (u8 regIdxA, u8 regIdxA)
// reg[regIdx] /= value (signed arithmetic)
SC_INSTRUCTION_DEF(idivRV, RV) // (u8 regIdx, u64 value) (signed arithmetic)
// reg[regIdxA] /= memory[eval(MEMORY_POINTER)]
SC_INSTRUCTION_DEF(idivRM, RM) // (u8 regIdxA, MEMORY_POINTER) (signed arithmetic)
// reg[regIdxA] %= reg[regIdxA]
SC_INSTRUCTION_DEF(remRR,  RR) // (u8 regIdxA, u8 regIdxA)
// reg[regIdx] %= value
SC_INSTRUCTION_DEF(remRV,  RV) // (u8 regIdx, u64 value)
// reg[regIdxA] %= memory[eval(MEMORY_POINTER)]
SC_INSTRUCTION_DEF(remRM,  RM) // (u8 regIdxA, MEMORY_POINTER)
// reg[regIdxA] %= reg[regIdxA]
SC_INSTRUCTION_DEF(iremRR, RR) // (u8 regIdxA, u8 regIdxA) (signed arithmetic)
// reg[regIdx] %= value
SC_INSTRUCTION_DEF(iremRV, RV) // (u8 regIdx, u64 value) (signed arithmetic)
// reg[regIdxA] %= memory[eval(MEMORY_POINTER)]
SC_INSTRUCTION_DEF(iremRM, RM) // (u8 regIdxA, MEMORY_POINTER) (signed arithmetic)

/// MARK: Floating point arithmetic
// reg[regIdxA] += reg[regIdxA]
SC_INSTRUCTION_DEF(faddRR, RR) // (u8 regIdxA, u8 regIdxA)
// reg[regIdx] += value
SC_INSTRUCTION_DEF(faddRV, RV) // (u8 regIdx, u64 value)
// reg[regIdxA] += memory[eval(MEMORY_POINTER)]
SC_INSTRUCTION_DEF(faddRM, RM) // (u8 regIdxA, MEMORY_POINTER)
// reg[regIdxA] -= reg[regIdxA]
SC_INSTRUCTION_DEF(fsubRR, RR) // (u8 regIdxA, u8 regIdxA)
// reg[regIdx] -= value
SC_INSTRUCTION_DEF(fsubRV, RV) // (u8 regIdx, u64 value)
// reg[regIdxA] -= memory[eval(MEMORY_POINTER)]
SC_INSTRUCTION_DEF(fsubRM, RM) // (u8 regIdxA, MEMORY_POINTER)
// reg[regIdxA] *= reg[regIdxA]
SC_INSTRUCTION_DEF(fmulRR, RR) // (u8 regIdxA, u8 regIdxA)
// reg[regIdx] *= value
SC_INSTRUCTION_DEF(fmulRV, RV) // (u8 regIdx, u64 value)
// reg[regIdxA] *= memory[eval(MEMORY_POINTER)]
SC_INSTRUCTION_DEF(fmulRM, RM) // (u8 regIdxA, MEMORY_POINTER)
// reg[regIdxA] /= reg[regIdxA]
SC_INSTRUCTION_DEF(fdivRR, RR) // (u8 regIdxA, u8 regIdxA)
// reg[regIdx]  /= value
SC_INSTRUCTION_DEF(fdivRV, RV) // (u8 regIdx, u64 value)
// reg[regIdxA] /= memory[eval(MEMORY_POINTER)]
SC_INSTRUCTION_DEF(fdivRM, RM) // (u8 regIdxA, MEMORY_POINTER)

/// ** Bitshift **
SC_INSTRUCTION_DEF(slRR, RR) //  (u8 regIdxA, u8 regIdxB)
SC_INSTRUCTION_DEF(slRV, RV) //  (u8 regIdxA, u64 value)
SC_INSTRUCTION_DEF(slRM, RM) //  (u8 regIdxA, MEMORY_POINTER)
SC_INSTRUCTION_DEF(srRR, RR) //  (u8 regIdxA, u8 regIdxB)
SC_INSTRUCTION_DEF(srRV, RV) //  (u8 regIdxA, u64 value)
SC_INSTRUCTION_DEF(srRM, RM) //  (u8 regIdxA, MEMORY_POINTER)

/// ** Bitwise AND/OR **
SC_INSTRUCTION_DEF(andRR, RR) //  (u8 regIdxA, u8 regIdxB)
SC_INSTRUCTION_DEF(andRV, RV) //  (u8 regIdxA, u64 value)
SC_INSTRUCTION_DEF(andRM, RM) //  (u8 regIdxA, MEMORY_POINTER)
SC_INSTRUCTION_DEF(orRR,  RR) //  (u8 regIdxA, u8 regIdxB)
SC_INSTRUCTION_DEF(orRV,  RV) //  (u8 regIdxA, u64 value)
SC_INSTRUCTION_DEF(orRM,  RM) //  (u8 regIdxA, MEMORY_POINTER)
SC_INSTRUCTION_DEF(xorRR, RR) //  (u8 regIdxA, u8 regIdxB)
SC_INSTRUCTION_DEF(xorRV, RV) //  (u8 regIdxA, u64 value)
SC_INSTRUCTION_DEF(xorRM, RM) //  (u8 regIdxA, MEMORY_POINTER)

/// ** Misc **
// extFunctionTable[tableIdx][idxIntoTable](regIdx, this)
SC_INSTRUCTION_DEF(callExt, Other) // (u8 regIdx, u8 tableIdx, u16 idxIntoTable)

#undef SC_INSTRUCTION_DEF

// ===----------------------------------------------------------------------===
// === List of all builtin functions ---------------------------------------===
// ===----------------------------------------------------------------------===

#ifndef SC_BUILTIN_DEF
#   define SC_BUILTIN_DEF(name)
#endif

SC_BUILTIN_DEF(puti64)

#undef SC_BUILTIN_DEF
