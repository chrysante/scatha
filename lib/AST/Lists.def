// No include guards

// ===----------------------------------------------------------------------===
// === List of all AST Nodes -----------------------------------------------===
// ===----------------------------------------------------------------------===

#ifndef SC_ASTNODE_DEF
#   define SC_ASTNODE_DEF(node, _)
#endif

SC_ASTNODE_DEF(AbstractSyntaxTree,    ABSTRACT)
SC_ASTNODE_DEF(TranslationUnit,       CONCRETE)
SC_ASTNODE_DEF(CompoundStatement,     CONCRETE)
SC_ASTNODE_DEF(Declaration,           ABSTRACT)
SC_ASTNODE_DEF(FunctionDefinition,    CONCRETE)
SC_ASTNODE_DEF(StructDefinition,      CONCRETE)
SC_ASTNODE_DEF(VariableDeclaration,   CONCRETE)
SC_ASTNODE_DEF(ParameterDeclaration,  CONCRETE)
SC_ASTNODE_DEF(Statement,             ABSTRACT)
SC_ASTNODE_DEF(ExpressionStatement,   CONCRETE)
SC_ASTNODE_DEF(EmptyStatement,        CONCRETE)
SC_ASTNODE_DEF(ControlFlowStatement,  ABSTRACT)
SC_ASTNODE_DEF(ReturnStatement,       CONCRETE)
SC_ASTNODE_DEF(IfStatement,           CONCRETE)
SC_ASTNODE_DEF(LoopStatement,         CONCRETE)
SC_ASTNODE_DEF(JumpStatement,         CONCRETE)
SC_ASTNODE_DEF(Expression,            ABSTRACT)
SC_ASTNODE_DEF(Identifier,            CONCRETE)
SC_ASTNODE_DEF(IntegerLiteral,        CONCRETE)
SC_ASTNODE_DEF(BooleanLiteral,        CONCRETE)
SC_ASTNODE_DEF(FloatingPointLiteral,  CONCRETE)
SC_ASTNODE_DEF(StringLiteral,         CONCRETE)
SC_ASTNODE_DEF(UnaryPrefixExpression, CONCRETE)
SC_ASTNODE_DEF(BinaryExpression,      CONCRETE)
SC_ASTNODE_DEF(MemberAccess,          CONCRETE)
SC_ASTNODE_DEF(ReferenceExpression,   CONCRETE)
SC_ASTNODE_DEF(UniqueExpression,      CONCRETE)
SC_ASTNODE_DEF(Conditional,           CONCRETE)
SC_ASTNODE_DEF(FunctionCall,          CONCRETE)
SC_ASTNODE_DEF(Subscript,             CONCRETE)
SC_ASTNODE_DEF(ListExpression,        CONCRETE)

#undef SC_ASTNODE_DEF

// ===----------------------------------------------------------------------===
// === List of unary operators ---------------------------------------------===
// ===----------------------------------------------------------------------===

#ifndef SC_UNARY_OPERATOR_DEF
#   define SC_UNARY_OPERATOR_DEF(name, opStr)
#endif

SC_UNARY_OPERATOR_DEF(Promotion,  "+")
SC_UNARY_OPERATOR_DEF(Negation,   "-")
SC_UNARY_OPERATOR_DEF(BitwiseNot, "~")
SC_UNARY_OPERATOR_DEF(LogicalNot, "!")
SC_UNARY_OPERATOR_DEF(Increment,  "++")
SC_UNARY_OPERATOR_DEF(Decrement,  "--")

#undef SC_UNARY_OPERATOR_DEF

// ===----------------------------------------------------------------------===
// === List of binary operators --------------------------------------------===
// ===----------------------------------------------------------------------===

#ifndef SC_BINARY_OPERATOR_DEF
#   define SC_BINARY_OPERATOR_DEF(node, opStr)
#endif

SC_BINARY_OPERATOR_DEF(Multiplication, "*"  )
SC_BINARY_OPERATOR_DEF(Division,       "/"  )
SC_BINARY_OPERATOR_DEF(Remainder,      "%"  )
SC_BINARY_OPERATOR_DEF(Addition,       "+"  )
SC_BINARY_OPERATOR_DEF(Subtraction,    "-"  )
SC_BINARY_OPERATOR_DEF(LeftShift,      "<<" )
SC_BINARY_OPERATOR_DEF(RightShift,     ">>" )
SC_BINARY_OPERATOR_DEF(Less,           "<"  )
SC_BINARY_OPERATOR_DEF(LessEq,         "<=" )
SC_BINARY_OPERATOR_DEF(Greater,        ">"  )
SC_BINARY_OPERATOR_DEF(GreaterEq,      ">=" )
SC_BINARY_OPERATOR_DEF(Equals,         "==" )
SC_BINARY_OPERATOR_DEF(NotEquals,      "!=" )
SC_BINARY_OPERATOR_DEF(BitwiseAnd,     "&"  )
SC_BINARY_OPERATOR_DEF(BitwiseXOr,     "^"  )
SC_BINARY_OPERATOR_DEF(BitwiseOr,      "|"  )
SC_BINARY_OPERATOR_DEF(LogicalAnd,     "&&" )
SC_BINARY_OPERATOR_DEF(LogicalOr,      "||" )
SC_BINARY_OPERATOR_DEF(Assignment,     "="  )
SC_BINARY_OPERATOR_DEF(AddAssignment,  "+=" )
SC_BINARY_OPERATOR_DEF(SubAssignment,  "-=" )
SC_BINARY_OPERATOR_DEF(MulAssignment,  "*=" )
SC_BINARY_OPERATOR_DEF(DivAssignment,  "/=" )
SC_BINARY_OPERATOR_DEF(RemAssignment,  "%=" )
SC_BINARY_OPERATOR_DEF(LSAssignment,   "<<=")
SC_BINARY_OPERATOR_DEF(RSAssignment,   ">>=")
SC_BINARY_OPERATOR_DEF(AndAssignment,  "&=" )
SC_BINARY_OPERATOR_DEF(OrAssignment,   "|=" )
SC_BINARY_OPERATOR_DEF(XOrAssignment,  "^=" )
SC_BINARY_OPERATOR_DEF(Comma,          ","  )

#undef SC_BINARY_OPERATOR_DEF

// ===----------------------------------------------------------------------===
// === List of access specifiers -------------------------------------------===
// ===----------------------------------------------------------------------===

#ifndef SC_ACCESS_SPEC_DEF
#   define SC_ACCESS_SPEC_DEF(name, opStr)
#endif

SC_ACCESS_SPEC_DEF(None,    "none")
SC_ACCESS_SPEC_DEF(Public,  "public")
SC_ACCESS_SPEC_DEF(Private, "private")

#undef SC_ACCESS_SPEC_DEF
