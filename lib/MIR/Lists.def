// No include guards

// ===----------------------------------------------------------------------===
// === CFG -----------------------------------------------------------------===
// ===----------------------------------------------------------------------===

#ifndef SC_MIR_CFGNODE_DEF
#   define SC_MIR_CFGNODE_DEF(node, _)
#endif

SC_MIR_CFGNODE_DEF(Value,               ABSTRACT)
SC_MIR_CFGNODE_DEF(Register,            ABSTRACT)
SC_MIR_CFGNODE_DEF(SSARegister,         CONCRETE)
SC_MIR_CFGNODE_DEF(VirtualRegister,     CONCRETE)
SC_MIR_CFGNODE_DEF(CalleeRegister,      CONCRETE)
SC_MIR_CFGNODE_DEF(HardwareRegister,    CONCRETE)
SC_MIR_CFGNODE_DEF(Constant,            CONCRETE)
SC_MIR_CFGNODE_DEF(UndefValue,          CONCRETE)
SC_MIR_CFGNODE_DEF(BasicBlock,          CONCRETE)
SC_MIR_CFGNODE_DEF(Function,            CONCRETE)

#undef SC_MIR_CFGNODE_DEF

// ===----------------------------------------------------------------------===
// === Instructions --------------------------------------------------------===
// ===----------------------------------------------------------------------===

#ifndef SC_MIR_INSTRUCTION_DEF
#   define SC_MIR_INSTRUCTION_DEF(node, name)
#endif

SC_MIR_INSTRUCTION_DEF(Store,           "store")      // (<Ptr> dest, Value source) [Data[0] = const-ptr-data]
SC_MIR_INSTRUCTION_DEF(Load,            "load")       // (<Ptr> source)             [Data[0] = const-ptr-data]
SC_MIR_INSTRUCTION_DEF(Copy,            "copy")       // (Value source)
SC_MIR_INSTRUCTION_DEF(Call,            "call")       // (Value callee)             [Data[0] = CallInstData,
                                                      //                             Data[1] = { bool is-memory-call, const-ptr-data }]
SC_MIR_INSTRUCTION_DEF(CallExt,         "callext")    // ()                         [Data[0] = CallInstData]
SC_MIR_INSTRUCTION_DEF(CondCopy,        "<cond-cpy>") // (Value source)             [Data[0] = condition]

SC_MIR_INSTRUCTION_DEF(LIncSP,          "incsp")      // (Constant numBytes)
SC_MIR_INSTRUCTION_DEF(LEA,             "lea")        // (<Ptr> address)            [Data[0] = const-ptr-data]
SC_MIR_INSTRUCTION_DEF(LDA,             "lda")        // (Value offset)
SC_MIR_INSTRUCTION_DEF(Compare,         "<compare>")  // (Value lhs, Value rhs)     [Data[0] = mode]
SC_MIR_INSTRUCTION_DEF(Test,            "<test>")     // (Value operand)            [Data[0] = mode]
SC_MIR_INSTRUCTION_DEF(Set,             "<set-inst>") // ()                         [Data[0] = condition]
SC_MIR_INSTRUCTION_DEF(UnaryArithmetic, "<un-arith>") // (Value operand)            [Data[0] = operation]
SC_MIR_INSTRUCTION_DEF(Arithmetic,      "<arith>")    // (Value lhs, Value rhs)     [Data[0] = operation]
SC_MIR_INSTRUCTION_DEF(Conversion,      "<conv>")     // (Register operand)         [Data[0] = conversion]
SC_MIR_INSTRUCTION_DEF(Jump,            "jmp")        // (BasicBlock target)
SC_MIR_INSTRUCTION_DEF(CondJump,        "<cond-jmp>") // (BasicBlock target)        [Data[0] = condition]
SC_MIR_INSTRUCTION_DEF(Return,          "ret")        // ()
SC_MIR_INSTRUCTION_DEF(Phi,             "phi")        // (Value...) // One Value entry per predecessor
SC_MIR_INSTRUCTION_DEF(Select,          "sel")        // (Value, Value)             [Data[0] = condition] // Condition to take first value

#undef SC_MIR_INSTRUCTION_DEF
