// No include guards

// ===----------------------------------------------------------------------===
// === List of all builtin functions ---------------------------------------===
// ===----------------------------------------------------------------------===

#ifndef SVM_BUILTIN_DEF
#   define SVM_BUILTIN_DEF(name, ...)
#endif

/// ## Common Math Functions
SVM_BUILTIN_DEF(abs_f64,   Const, { F64() }, F64())
SVM_BUILTIN_DEF(exp_f64,   Const, { F64() }, F64())
SVM_BUILTIN_DEF(exp2_f64,  Const, { F64() }, F64())
SVM_BUILTIN_DEF(exp10_f64, Const, { F64() }, F64())
SVM_BUILTIN_DEF(log_f64,   Const, { F64() }, F64())
SVM_BUILTIN_DEF(log2_f64,  Const, { F64() }, F64())
SVM_BUILTIN_DEF(log10_f64, Const, { F64() }, F64())
SVM_BUILTIN_DEF(pow_f64,   Const, { F64(), F64() }, F64())
SVM_BUILTIN_DEF(sqrt_f64,  Const, { F64() }, F64())
SVM_BUILTIN_DEF(cbrt_f64,  Const, { F64() }, F64())
SVM_BUILTIN_DEF(hypot_f64, Const, { F64(), F64() }, F64())
SVM_BUILTIN_DEF(sin_f64,   Const, { F64() }, F64())
SVM_BUILTIN_DEF(cos_f64,   Const, { F64() }, F64())
SVM_BUILTIN_DEF(tan_f64,   Const, { F64() }, F64())
SVM_BUILTIN_DEF(asin_f64,  Const, { F64() }, F64())
SVM_BUILTIN_DEF(acos_f64,  Const, { F64() }, F64())
SVM_BUILTIN_DEF(atan_f64,  Const, { F64() }, F64())

SVM_BUILTIN_DEF(abs_f32,   Const, { F32() }, F32())
SVM_BUILTIN_DEF(exp_f32,   Const, { F32() }, F32())
SVM_BUILTIN_DEF(exp2_f32,  Const, { F32() }, F32())
SVM_BUILTIN_DEF(exp10_f32, Const, { F32() }, F32())
SVM_BUILTIN_DEF(log_f32,   Const, { F32() }, F32())
SVM_BUILTIN_DEF(log2_f32,  Const, { F32() }, F32())
SVM_BUILTIN_DEF(log10_f32, Const, { F32() }, F32())
SVM_BUILTIN_DEF(pow_f32,   Const, { F32(), F32() }, F32())
SVM_BUILTIN_DEF(sqrt_f32,  Const, { F32() }, F32())
SVM_BUILTIN_DEF(cbrt_f32,  Const, { F32() }, F32())
SVM_BUILTIN_DEF(hypot_f32, Const, { F32(), F32() }, F32())
SVM_BUILTIN_DEF(sin_f32,   Const, { F32() }, F32())
SVM_BUILTIN_DEF(cos_f32,   Const, { F32() }, F32())
SVM_BUILTIN_DEF(tan_f32,   Const, { F32() }, F32())
SVM_BUILTIN_DEF(asin_f32,  Const, { F32() }, F32())
SVM_BUILTIN_DEF(acos_f32,  Const, { F32() }, F32())
SVM_BUILTIN_DEF(atan_f32,  Const, { F32() }, F32())

/// ## Memory Management
SVM_BUILTIN_DEF(memcpy,  None,  {
    pointer(QualType::Mut(arrayType(Byte()))),
    pointer(QualType::Const(arrayType(Byte())))
}, Void())
SVM_BUILTIN_DEF(memset,  None,  {
    pointer(QualType::Mut(arrayType(Byte()))),
    S64()
}, Void())
SVM_BUILTIN_DEF(alloc, None, { S64(), S64() },
                pointer(QualType::Mut(arrayType(Byte()))))
SVM_BUILTIN_DEF(dealloc, None, {
    pointer(QualType::Mut(arrayType(Byte()))),
    S64()
}, Void())

/// ## Console Output
SVM_BUILTIN_DEF(putchar,   None,  { Byte() }, Void())
SVM_BUILTIN_DEF(puti64,    None,  { S64() }, Void())
SVM_BUILTIN_DEF(putf64,    None,  { F64() }, Void())
SVM_BUILTIN_DEF(putstr,    None,
                { reference(QualType::Const(arrayType(Byte()))) }, Void())
SVM_BUILTIN_DEF(putptr,    None,  { pointer(Byte()) }, Void())

/// ## Console Input
/// Allocates memory using `__builtin_alloc()` and thus requires the caller to
/// free the memory using `__builtin_dealloc()`
/// Signature: `() -> *mut [byte]`
SVM_BUILTIN_DEF(readline,   None, {},
                pointer(QualType::Mut(arrayType(Byte()))))

/// ## String conversion

/// Returns true on successful conversion
/// Signature: `(result: &mut int, text: &[byte], base: int) -> bool`
SVM_BUILTIN_DEF(strtos64,    None, {
    reference(QualType::Mut(S64())),
    reference(QualType::Const(arrayType(Byte()))),
    S64()
}, Bool())

/// Returns true on successful conversion
/// Signature: `(result: &mut double, text: &[byte]) -> bool`
SVM_BUILTIN_DEF(strtof64,    None, {
    reference(QualType::Mut(F64())),
    reference(QualType::Const(arrayType(Byte())))
}, Bool())

/// ##
SVM_BUILTIN_DEF(trap,    None,  {  }, Void())

/// Quick and dirty randon number generation.
SVM_BUILTIN_DEF(rand_i64, None,  {  }, S64())

#undef SVM_BUILTIN_DEF
